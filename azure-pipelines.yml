trigger:
- master

pool:
  vmImage: ubuntu-latest

variables: 
  - group: jfrog-artifactory
  - name: key-jfrog
    value: $[variables.key]

  - name: REPO_BASE_URL 
    value: "http://52.154.74.192/:8081"
  - name: PUBLISH_REPO_SNAPSHOT_URL 
    value: "repository/nodejs-release"
  
  - name: JFROG_REPO_BASE_URL 
    value: "http://34.68.201.128:8082/artifactory"
  - name: JFROG_PUBLISH_REPO_SNAPSHOT_URL 
    value: "devops/repository/nodejs-release"

name: $(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: continous_integration
  jobs:
  - job: jb_build_application
    displayName: task's nodejs
    steps:
      # get dependencies
      - script: npm install
        displayName: ts_get_dependencies
        name: ts_get_dependencies
      # generate artifact
      - task: Npm@1
        continueOnError: false
        name: ts_build_application
        inputs:
          command: 'custom'
          customCommand: 'run build'
      # generate zip file
      - script: cd dist/taller && zip -r example$(Build.BuildId).zip *
        displayName: compressing_files
        continueOnError: false
        name: compressing_files
      # copying files in the root folder
      - script: cp dist/taller/example$(Build.BuildId).zip . && ls -ltrs
        displayName: copy_files
        continueOnError: false
        name: copy_files
      
      # send file to nexus repository
      # - script: curl -s -u admin:Quevida890q12* --upload-file example$(Build.BuildId).zip $(REPO_BASE_URL)/$(PUBLISH_REPO_SNAPSHOT_URL)/taller/azure/$(Build.BuildId).zip --insecure
      #   displayName: send_file_nexus
      #   name: send_file_nexus

      # send file to jfrog repository
      - script: curl -u admin:$(key-jfrog) -X PUT "$(JFROG_REPO_BASE_URL)/$(JFROG_PUBLISH_REPO_SNAPSHOT_URL)/$(Build.BuildId).zip" -T example$(Build.BuildId).zip
        displayName: send files to jfrog artifactory
        name: send_files_jfrog
      
      # Execute unit tesst
      # - task: Npm@1
      #   continueOnError: false
      #   name: ts_unit_test
      #   inputs:
      #     command: 'custom'
      #     customCommand: 'run test-ci'
      
      # Prepare Analysis Configuration task
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'sonarqube'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'angular-azure-devops'
          cliProjectName: 'angular-azure-devops'
          cliSources: '.'
          extraProperties: |
            sonar.typescript.lcov.reportPaths=coverage/lcov.info
            sonar.projectVersion=$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
      # Run Code Analysis task
      - task: SonarQubeAnalyze@4
      # Publish Quality Gate Result task
      - task: SonarQubePublish@4
        inputs:
          pollingTimeoutSec: '300'

- stage: build_and_push_images
  jobs:
  - job: docker_tasks
    steps:
      # - script: 'docker build -t haroldo89/azure-devops:$(Build.BuildId) .'
      #   name: build_image
      #   continueOnError: false
      - task: Docker@2
        displayName: build_image
        inputs:
          containerRegistry: 'docker-haroldo89'
          repository: 'haroldo89/azure-devops'
          tags: $(Build.BuildId)
          command: 'build'
          Dockerfile: '**/Dockerfile'
      - task: Docker@2
        displayName: push_image
        inputs:
          containerRegistry: 'docker-haroldo89'
          repository: 'haroldo89/azure-devops'
          command: 'push'
          tags:  $(Build.BuildId)

      - task: Docker@2
        displayName: build_push_image_gcp
        inputs:
          containerRegistry: 'gcr-tutorial'
          repository: 'gcr/azure-devops'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags:  $(Build.BuildId)

- stage: Deploy
  jobs:
  - job: Deploy
    steps:
     - task: CopyPublishBuildArtifacts@1
       inputs:
         CopyRoot: 'dist/taller/example$(Build.BuildId).zip'
         Contents: '*'
         ArtifactName: 'hacaicedoto'
         ArtifactType: 'Container'
     - script: echo Deploying the code!